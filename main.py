import pyaudio
from vosk import Model, KaldiRecognizer
import sys
import json
import os
import time
import datetime
from scipy.signal import resample
import numpy as np
import requests
import re
import cv2
import pyautogui
import pygetwindow as gw
from PIL import Image
import threading

CONFIG_FILE = "config.json"
SPEAKERS_FILE = "speakers.json"

FORMAT = pyaudio.paInt16
CHANNELS = 1
RATE = 44100
VOSK_RATE = 16000
CHUNK = 4096

class SlideCapture:
    def __init__(self, window_title, save_path, interval=10, change_threshold=0.5):
        self.window_title = window_title
        self.save_path = save_path
        self.interval = interval
        self.change_threshold = change_threshold
        self.previous_screenshot = None
        self.running = False
        self.thread = None

    def start(self):
        self.running = True
        self.thread = threading.Thread(target=self._capture_loop)
        self.thread.daemon = True
        self.thread.start()

    def stop(self):
        self.running = False
        if self.thread:
            self.thread.join()

    def _capture_loop(self):
        while self.running:
            try:
                self._check_and_capture()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—Ö–≤–∞—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            time.sleep(self.interval)

    def _get_browser_window(self):
        try:
            windows = gw.getWindowsWithTitle(self.window_title)
            if windows:
                return windows[0]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–∫–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
        return None

    def _take_screenshot(self, window):
        try:
            if window.isMinimized:
                window.restore()
            
            x, y, width, height = window.left, window.top, window.width, window.height
            screenshot = pyautogui.screenshot(region=(x, y, width, height))
            return cv2.cvtColor(np.array(screenshot), cv2.COLOR_RGB2BGR)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—Ö–≤–∞—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            return None

    def _has_significant_change(self, img1, img2):
        img1_gray = cv2.cvtColor(img1, cv2.COLOR_BGR2GRAY)
        img2_gray = cv2.cvtColor(img2, cv2.COLOR_BGR2GRAY)
        
        diff = cv2.absdiff(img1_gray, img2_gray)
        _, threshold_diff = cv2.threshold(diff, 30, 255, cv2.THRESH_BINARY)
        
        changed_pixels = np.sum(threshold_diff) / 255
        total_pixels = img1_gray.size
        change_ratio = changed_pixels / total_pixels
        
        return change_ratio > self.change_threshold

    def _check_and_capture(self):
        window = self._get_browser_window()
        if not window:
            return

        screenshot = self._take_screenshot(window)
        if screenshot is None:
            return

        if self.previous_screenshot is not None:
            if self._has_significant_change(self.previous_screenshot, screenshot):
                timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = os.path.join(self.save_path, f"slide_{timestamp}.png")
                cv2.imwrite(filename, screenshot)
                print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–ª–∞–π–¥–∞: {filename}")

        self.previous_screenshot = screenshot

class SpeakerManager:
    def __init__(self):
        self.speakers = {}
        self.next_speaker_id = 1
        self.tolerance = 0.5
        self.load_speakers()

    def load_speakers(self):
        if os.path.exists(SPEAKERS_FILE):
            try:
                with open(SPEAKERS_FILE, "r") as f:
                    self.speakers = json.load(f)
                    self.next_speaker_id = len(self.speakers) + 1
            except (IOError, json.JSONDecodeError):
                pass

    def save_speakers(self):
        with open(SPEAKERS_FILE, "w") as f:
            json.dump(self.speakers, f)

    def get_speaker_label(self, spk_vector):
        if not spk_vector:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–ø–∏–∫–µ—Ä"

        vector_array = np.array(spk_vector)

        for name, vector_data in self.speakers.items():
            stored_vector = np.array(vector_data["vector"])
            cosine_similarity = np.dot(vector_array, stored_vector) / (np.linalg.norm(vector_array) * np.linalg.norm(stored_vector))
            
            if cosine_similarity > 0.8:
                return name

        new_name = f"–°–ø–∏–∫–µ—Ä {self.next_speaker_id}"
        self.speakers[new_name] = {"vector": spk_vector}
        self.next_speaker_id += 1
        self.save_speakers()
        return new_name

def get_model_paths():
    browser_window_title = ""
    if os.path.exists(CONFIG_FILE):
        try:
            with open(CONFIG_FILE, "r") as f:
                config = json.load(f)
                vosk_model_path = config.get("VOSK_MODEL_PATH")
                speaker_model_path = config.get("SPEAKER_MODEL_PATH")
                browser_window_title = config.get("BROWSER_WINDOW_TITLE", "")
                
                if vosk_model_path and os.path.isdir(vosk_model_path):
                    return vosk_model_path, speaker_model_path, browser_window_title
                else:
                    print("–ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ Vosk –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.")
        except (IOError, json.JSONDecodeError):
            print("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
    
    while True:
        vosk_model_path = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –º–æ–¥–µ–ª—å—é Vosk: ")
        if os.path.isdir(vosk_model_path):
            try:
                speaker_model_path = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –º–æ–¥–µ–ª—å—é –¥–ª—è —Å–ø–∏–∫–µ—Ä–æ–≤ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å): ")
                if not os.path.isdir(speaker_model_path):
                    speaker_model_path = None
                    print("–ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–ø–∏–∫–µ—Ä–æ–≤ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞.")

                browser_window_title = input("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ —Å–ª–∞–π–¥–æ–≤ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å): ")

                with open(CONFIG_FILE, "w") as f:
                    json.dump({
                        "VOSK_MODEL_PATH": vosk_model_path,
                        "SPEAKER_MODEL_PATH": speaker_model_path,
                        "BROWSER_WINDOW_TITLE": browser_window_title
                    }, f)
                return vosk_model_path, speaker_model_path, browser_window_title
            except IOError as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—É—Ç–∏: {e}")
                return None, None, ""
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –ø—É—Ç—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

def find_vb_cable_device():
    p = pyaudio.PyAudio()
    info = p.get_host_api_info_by_index(0)
    numdevices = info.get('deviceCount')
    
    vb_cable_index = -1
    print("---------------------------------")
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
    print("---------------------------------")
    for i in range(0, numdevices):
        device_info = p.get_device_info_by_host_api_device_index(0, i)
        device_name = device_info.get('name')
        input_channels = device_info.get('maxInputChannels')
        output_channels = device_info.get('maxOutputChannels')
        
        if "CABLE Output" in device_name and input_channels > 0:
            vb_cable_index = i
            print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {i}: {device_name}")
            print(f"  –í—Ö–æ–¥–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {input_channels}")
            break
        
    print("---------------------------------")
    p.terminate()

    if vb_cable_index == -1:
        print("–û—à–∏–±–∫–∞: –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ VB-CABLE (CABLE Output) –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏ Windows –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤—É–∫–∞ –≤ 'CABLE Input' –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç.")
        return None
    
    return vb_cable_index

def post_process_with_llm(text_to_process):
    print("\n–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é LLM...")
    
    # üìù –°–í–ï–†–•–ü–û–î–†–û–ë–ù–´–ô –ü–†–û–ú–ü–¢ –î–õ–Ø –ü–û–°–¢-–û–ë–†–ê–ë–û–¢–ö–ò
    system_prompt = (
        "–¢—ã ‚Äî –≤—ã—Å–æ–∫–æ–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –∏ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —É—á–µ–±–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è—Ö –ª–µ–∫—Ü–∏–π. "
        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –≤–∑—è—Ç—å —Å—ã—Ä—É—é, –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —É—Å—Ç–Ω–æ–π —Ä–µ—á–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –µ–µ –≤ –±–µ–∑—É–ø—Ä–µ—á–Ω—ã–π, "
        "–≥—Ä–∞–º–æ—Ç–Ω—ã–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫–∞–∫ –∫–æ–Ω—Å–ø–µ–∫—Ç –∏–ª–∏ —É—á–µ–±–Ω–æ–µ –ø–æ—Å–æ–±–∏–µ. "
        "–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –º–Ω–æ–≥–æ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏, —Å–ª–æ–≤–∞-–ø–∞—Ä–∞–∑–∏—Ç—ã, –ø–æ–≤—Ç–æ—Ä—ã, –Ω–µ–ø–æ–ª–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, "
        "–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–π —Ä–µ—á–∏ –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è. "
        "–í—Å—è —Ç–≤–æ—è —Ä–∞–±–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ù–∏–∫–∞–∫–∏—Ö –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏–ª–∏ –∑–∞–∫–ª—é—á–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. "
        "\n\n**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:**\n"
        "1.  **–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞:** –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π –≤–µ—Å—å —Ç–µ–∫—Å—Ç. –£–¥–∞–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞-–ø–∞—Ä–∞–∑–∏—Ç—ã ('–Ω—É', '—Ç–∏–ø–∞', '–∫–æ—Ä–æ—á–µ'), –º–µ–∂–¥–æ–º–µ—Ç–∏—è ('—Ö–º', '–∞–≥–∞'), "
        "–ø–æ–≤—Ç–æ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω–µ—Å—É—Ç —Å–º—ã—Å–ª–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ ('–æ—á–µ–Ω—å-–æ—á–µ–Ω—å', '—è-—è-—è').\n"
        "2.  **–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞ –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏—è:** –ò—Å–ø—Ä–∞–≤—å –≤—Å–µ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ, –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏. –†–∞—Å—Å—Ç–∞–≤—å –∑–∞–ø—è—Ç—ã–µ, —Ç–æ—á–∫–∏, —Ç–∏—Ä–µ –∏ –¥—Ä—É–≥–∏–µ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è —Ç–∞–∫, "
        "—á—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å—Ç–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏ –ª–µ–≥–∫–æ —á–∏—Ç–∞–ª–∏—Å—å.\n"
        "3.  **–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ:** –†–∞–∑–±–µ–π —Ç–µ–∫—Å—Ç –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∞–±–∑–∞—Ü—ã. –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è –∏–ª–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, "
        "–æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π –∏—Ö –≤ –≤–∏–¥–µ –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–ª–∏ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å.\n"
        "4.  **–°–≤—è–∑–Ω–æ—Å—Ç—å:** –û–±—ä–µ–¥–∏–Ω–∏ –Ω–µ–ø–æ–ª–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –µ–¥–∏–Ω—ã–π, —Å–≤—è–∑–Ω—ã–π —Ç–µ–∫—Å—Ç. –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —Å–ª–æ–∂–Ω—ã–µ –∏–ª–∏ –∑–∞–ø—É—Ç–∞–Ω–Ω—ã–µ –æ–±–æ—Ä–æ—Ç—ã, "
        "—á—Ç–æ–±—ã —Å–º—ã—Å–ª —Å—Ç–∞–ª –ø—Ä–µ–¥–µ–ª—å–Ω–æ —è—Å–µ–Ω. –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω —Ç–µ—á—å –ø–ª–∞–≤–Ω–æ, –∫–∞–∫ –±—É–¥—Ç–æ –æ–Ω –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –±—ã–ª –Ω–∞–ø–∏—Å–∞–Ω, –∞ –Ω–µ –Ω–∞–¥–∏–∫—Ç–æ–≤–∞–Ω.\n"
        "5.  **–í—ã–∂–∏–º–∫–∞ (—Ä–µ–∑—é–º–µ):** –í —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ —Ç–µ–∫—Å—Ç–∞, –ø–æ—Å–ª–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π —á–µ—Ä—Ç—ã `---`, —Å–æ–∑–¥–∞–π –Ω–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª. "
        "–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫—É—é, –Ω–æ –∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â—É—é –≤—ã–∂–∏–º–∫—É –≤—Å–µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞. –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –¥–æ–ª–∂–µ–Ω –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è '–ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã' "
        "–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 4 –¥–æ 15 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –í—ã–∂–∏–º–∫–∞ –¥–æ–ª–∂–Ω–∞ –≤–∫–ª—é—á–∞—Ç—å —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –∏–¥–µ–∏, –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏, —Ñ–æ—Ä–º—É–ª—ã –∏ –≥–ª–∞–≤–Ω—ã–µ —Ç–µ–∑–∏—Å—ã —É—Ä–æ–∫–∞, "
        "–ø–æ–∑–≤–æ–ª—è—è –±—ã—Å—Ç—Ä–æ –≤—Å–ø–æ–º–Ω–∏—Ç—å –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ. –ù–µ –≤–∫–ª—é—á–∞–π –≤ –≤—ã–∂–∏–º–∫—É –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏."
    )
    
    payload = {
        "model": "llama3:8b",
        "prompt": f"system: {system_prompt}\nuser: {text_to_process}",
        "stream": False,
        "options": {
            "temperature": 0.7,
            "top_p": 0.9,
            "num_ctx": 16384  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –æ–∫–Ω–æ
        }
    }
    
    try:
        response = requests.post("http://localhost:11434/api/generate", json=payload)
        response.raise_for_status()
        result = response.json()["response"]
        return result if result.strip() else "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç"
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Ollama: {e}")
        return "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Ollama –∑–∞–ø—É—â–µ–Ω –∏ –º–æ–¥–µ–ª—å llama3:8b –∑–∞–≥—Ä—É–∂–µ–Ω–∞."

def get_folder_name_from_llm(text_to_process):
    print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏ —Å –ø–æ–º–æ—â—å—é AI...")
    
    # üìù –°–í–ï–†–•–ü–û–î–†–û–ë–ù–´–ô –ü–†–û–ú–ü–¢ –î–õ–Ø –ù–ê–ó–í–ê–ù–ò–Ø –ü–ê–ü–ö–ò
    system_prompt = (
        "–¢—ã ‚Äî —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã. "
        "–¢–≤–æ—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–∏–¥—É–º–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–æ–µ, —Ç–æ—á–Ω–æ–µ –∏ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ "
        "–Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —É—Ä–æ–∫–∞. –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å **–∫–æ—Ä–æ—Ç–∫–∏–º** (–æ—Ç 3 –¥–æ 5 —Å–ª–æ–≤) –∏ "
        "—Å–æ—Å—Ç–æ—è—Ç—å **–∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –∏–∑ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ –ø—Ä–æ–±–µ–ª–æ–≤**. "
        "–ö—Ä–∞–π–Ω–µ –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –≤ –æ—Ç–≤–µ—Ç–µ –±—ã–ª–æ **—Ç–æ–ª—å–∫–æ —Å–∞–º–æ –Ω–∞–∑–≤–∞–Ω–∏–µ**, –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –≤–≤–æ–¥–Ω—ã—Ö —Ñ—Ä–∞–∑, –∫–∞–≤—ã—á–µ–∫, "
        "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π, –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∏–ª–∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤. –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
    )
    
    payload = {
        "model": "llama3:8b",
        "prompt": f"system: {system_prompt}\nuser: {text_to_process}",
        "stream": False,
        "options": {
            "temperature": 0.3,
            "num_ctx": 4096
        }
    }
    
    try:
        response = requests.post("http://localhost:11434/api/generate", json=payload)
        response.raise_for_status()
        llm_response = response.json()["response"].strip()
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        sanitized_name = re.sub(r'[^–∞-—è–ê-–Ø0-9\s]', '', llm_response)
        sanitized_name = re.sub(r'\s+', '_', sanitized_name.strip())
        return sanitized_name if sanitized_name else "—É—Ä–æ–∫"
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Ollama –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏: {e}")
        return datetime.datetime.now().strftime("—É—Ä–æ–∫_%Y-%m-%d_%H-%M-%S")

def get_detailed_retelling_from_llm(text_to_process):
    print("–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–∫–∞–∑–∞...")
    # üìù –°–í–ï–†–•–ü–û–î–†–û–ë–ù–´–ô –ü–†–û–ú–ü–¢ –î–õ–Ø –ü–ï–†–ï–°–ö–ê–ó–ê
    system_prompt = (
        "–¢—ã ‚Äî –≤—ã—Å–æ–∫–æ–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤ –∏ –ø–µ—Ä–µ—Å–∫–∞–∑–æ–≤. "
        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ–∑–¥–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, –ø–æ–ª–Ω—ã–π –∏ –∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑ "
        "–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –¢–≤–æ—è —Ü–µ–ª—å ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∂–¥—É—é –≤–∞–∂–Ω—É—é –¥–µ—Ç–∞–ª—å, "
        "–∫–∞–∂–¥–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ, –∫–∞–∂–¥—ã–π –ø—Ä–∏–º–µ—Ä –∏ –∫–∞–∂–¥—É—é –∫–æ–Ω—Ü–µ–ø—Ü–∏—é, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–µ. "
        "–ü–µ—Ä–µ—Å–∫–∞–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–Ω—è—Ç–Ω—ã–º –∏ –ª–æ–≥–∏—á–µ—Å–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º, —á—Ç–æ–±—ã –µ–≥–æ –º–æ–≥ –ø–æ–Ω—è—Ç—å "
        "–¥–∞–∂–µ —á–µ–ª–æ–≤–µ–∫, –Ω–µ –∑–Ω–∞–∫–æ–º—ã–π —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π. "
        "\n\n**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:**\n"
        "1.  **–ü–æ–ª–Ω–æ—Ç–∞:** –ù–∏—á–µ–≥–æ –Ω–µ —É–ø—É—Å–∫–∞–π. –ü–µ—Ä–µ—Å–∫–∞–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–∞–∫–∏–º –∂–µ –¥–ª–∏–Ω–Ω—ã–º, –∫–∞–∫ –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª, –µ—Å–ª–∏ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ, "
        "–∑–∞ —Å—á–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–≤—è–∑—É—é—â–∏—Ö —Ñ—Ä–∞–∑ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏. –í–∫–ª—é—á–∏ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –∏–¥–µ–∏, —Ñ–æ—Ä–º—É–ª—ã, –¥–∞—Ç—ã, –∏–º–µ–Ω–∞ –∏ "
        "–¥—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ —Ñ–∞–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Ç–µ–∫—Å—Ç–µ.\n"
        "2.  **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —è—Å–Ω–æ—Å—Ç—å:** –û—Ä–≥–∞–Ω–∏–∑—É–π –ø–µ—Ä–µ—Å–∫–∞–∑ –≤ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∞–±–∑–∞—Ü—ã. –ò—Å–ø–æ–ª—å–∑—É–π –∑–∞–≥–æ–ª–æ–≤–∫–∏, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç "
        "—Ä–∞–∑–¥–µ–ª–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Å–º—ã—Å–ª–æ–≤—ã–µ –±–ª–æ–∫–∏. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É –∞–±–∑–∞—Ü–∞–º–∏ –∏ –∏–¥–µ—è–º–∏ –ø–ª–∞–≤–Ω—ã–µ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ.\n"
        "3.  **–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:** –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ —Å–∞–º–∏–º –ø–µ—Ä–µ—Å–∫–∞–∑–æ–º, –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏–ª–∏ –∑–∞–∫–ª—é—á–µ–Ω–∏–π. "
        "–í–µ—Å—å –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
    )
    payload = {
        "model": "llama3:8b",
        "prompt": f"system: {system_prompt}\nuser: {text_to_process}",
        "stream": False,
        "options": {
            "temperature": 0.7,
            "num_ctx": 16384
        }
    }
    try:
        response = requests.post("http://localhost:11434/api/generate", json=payload)
        response.raise_for_status()
        result = response.json()["response"]
        return result if result.strip() else "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–µ—Å–∫–∞–∑"
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä–µ—Å–∫–∞–∑–∞ –æ—Ç Ollama: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä–µ—Å–∫–∞–∑–∞."

def get_questions_from_llm(text_to_process):
    print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤...")
    # üìù –°–í–ï–†–•–ü–û–î–†–û–ë–ù–´–ô –ü–†–û–ú–ü–¢ –î–õ–Ø –í–û–ü–†–û–°–û–í
    system_prompt = (
        "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é —É—á–µ–±–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ–∑–¥–∞—Ç—å 5-10 —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã—Ö, "
        "—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –æ—Ç–≤–µ—Ç–∞, –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞ –≥–ª—É–±–æ–∫–æ–º "
        "–ø–æ–Ω–∏–º–∞–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ–≤. "
        "–í–æ–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –æ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏, –ø—Ä–∏—á–∏–Ω—ã, —Å–ª–µ–¥—Å—Ç–≤–∏—è, –ø—Ä–∏–º–µ—Ä—ã –∏ "
        "–≤–∑–∞–∏–º–æ—Å–≤—è–∑–∏, —É–ø–æ–º—è–Ω—É—Ç—ã–µ –≤ —Ç–µ–∫—Å—Ç–µ. –ò–∑–±–µ–≥–∞–π –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å "
        "–æ–¥–Ω–æ—Å–ª–æ–∂–Ω–æ ('–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'). "
        "–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–∫–æ–º –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏. –ù–∏–∫–∞–∫–∏—Ö –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π, –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏–ª–∏ "
        "–∑–∞–∫–ª—é—á–µ–Ω–∏–π. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
    )
    payload = {
        "model": "llama3:8b",
        "prompt": f"system: {system_prompt}\nuser: {text_to_process}",
        "stream": False,
        "options": {
            "temperature": 0.7,
            "num_ctx": 8192
        }
    }
    try:
        response = requests.post("http://localhost:11434/api/generate", json=payload)
        response.raise_for_status()
        result = response.json()["response"]
        return result if result.strip() else "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã"
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç Ollama: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤."

def rewrite_last_transcription():
    print("\n–ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–∞–π–ª–∞...")
    transcription_dir = "transcriptions"
    if not os.path.isdir(transcription_dir):
        print("–û—à–∏–±–∫–∞: –ü–∞–ø–∫–∞ 'transcriptions' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–ø–∏—Å—å.")
        return

    folders = [os.path.join(transcription_dir, d) for d in os.listdir(transcription_dir) if os.path.isdir(os.path.join(transcription_dir, d))]
    if not folders:
        print("–û—à–∏–±–∫–∞: –ü–∞–ø–∫–∞ 'transcriptions' –ø—É—Å—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–ø–∏—Å—å.")
        return
    
    latest_folder = max(folders, key=os.path.getctime)
    raw_file_path = os.path.join(latest_folder, "transcription_raw.txt")
    processed_file_path = os.path.join(latest_folder, "transcription_processed.txt")
    
    if not os.path.exists(raw_file_path):
        print(f"–û—à–∏–±–∫–∞: –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª '{raw_file_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–µ—Ä–µ–∫–æ–º–ø–∏–ª—è—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
        return
        
    try:
        with open(raw_file_path, "r", encoding="utf-8") as f:
            full_transcription_text = f.read()

        print(f"–ù–∞–π–¥–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: '{raw_file_path}'")
        
        processed_text = post_process_with_llm(full_transcription_text)
        retelling_text = get_detailed_retelling_from_llm(full_transcription_text)
        questions_text = get_questions_from_llm(full_transcription_text)

        final_output = f"## –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –≤—ã–∂–∏–º–∫–∞\n\n{processed_text}\n\n"
        final_output += f"## –ü–æ–¥—Ä–æ–±–Ω—ã–π –ø–µ—Ä–µ—Å–∫–∞–∑\n\n{retelling_text}\n\n"
        final_output += f"## –í–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ\n\n{questions_text}"
        
        with open(processed_file_path, "w", encoding="utf-8") as f:
            f.write(final_output)

        print(f"–§–∞–π–ª '{processed_file_path}' —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω.")
        
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–æ–º–ø–∏–ª—è—Ü–∏–∏: {e}")

def transcribe_audio_stream(vb_cable_index, vosk_model_path, speaker_model_path, browser_window_title):
    try:
        model = Model(vosk_model_path)
        speaker_model = Model(speaker_model_path) if speaker_model_path else None
    except Exception as e:
        print(f"–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å Vosk. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã: {e}")
        return

    recognizer = KaldiRecognizer(model, VOSK_RATE)
    if speaker_model:
        recognizer.SetSpkModel(speaker_model)
    
    p = pyaudio.PyAudio()
    speaker_manager = SpeakerManager()
    
    full_transcription_text = ""
    last_transcribed_text = ""
    
    slide_capture = None
    if browser_window_title:
        slide_capture = SlideCapture(browser_window_title, "", interval=10)
    
    try:
        input_stream = p.open(format=FORMAT,
                              channels=CHANNELS,
                              rate=RATE,
                              input=True,
                              input_device_index=vb_cable_index,
                              frames_per_buffer=CHUNK)

        print(f"–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Å–ª—É—à–∞–µ—Ç VB-CABLE. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        
        if slide_capture:
            slide_capture.start()
            
    except Exception as e:
        print(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫: {e}")
        return
    
    try:
        while True:
            data = input_stream.read(CHUNK, exception_on_overflow=False)
            
            resampled_data = resample(np.frombuffer(data, dtype=np.int16), int(CHUNK * VOSK_RATE / RATE)).astype(np.int16).tobytes()
            
            if recognizer.AcceptWaveform(resampled_data):
                result_data = json.loads(recognizer.Result())
                transcription = result_data.get("text", "")
                speaker_vector = result_data.get("spk")
                
                if transcription and transcription.strip() != "" and transcription.strip() != last_transcribed_text:
                    text_to_write = transcription
                    if speaker_vector:
                        speaker_label = speaker_manager.get_speaker_label(speaker_vector)
                        text_to_write = f"[{speaker_label}]: {transcription}"
                    
                    full_transcription_text += text_to_write + "\n"
                    last_transcribed_text = transcription.strip()
                    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {text_to_write}")
            else:
                partial_result = json.loads(recognizer.PartialResult())["partial"]
                if partial_result.strip() != "":
                    sys.stdout.write(partial_result + "\r")
                    sys.stdout.flush()
    
    except KeyboardInterrupt:
        print("\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        
        final_result = json.loads(recognizer.FinalResult())
        transcription = final_result.get("text", "")
        if transcription and transcription.strip() != "":
            full_transcription_text += transcription + "\n"
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç (–æ—Å—Ç–∞—Ç–æ–∫): {transcription}")

    except Exception as e:
        print(f"\n–û—à–∏–±–∫–∞: –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {e}")
    finally:
        if 'input_stream' in locals() and input_stream.is_active():
            input_stream.stop_stream()
            input_stream.close()
        p.terminate()
        
        if slide_capture:
            slide_capture.stop()
        
        if full_transcription_text.strip(): 
            folder_name = get_folder_name_from_llm(full_transcription_text)
            transcription_folder = os.path.join("transcriptions", folder_name)
            os.makedirs(transcription_folder, exist_ok=True)
            
            if slide_capture:
                slide_capture.save_path = transcription_folder
                slide_capture._check_and_capture()
            
            raw_transcription_file_path = os.path.join(transcription_folder, "transcription_raw.txt")
            processed_transcription_file_path = os.path.join(transcription_folder, "transcription_processed.txt")
            
            with open(raw_transcription_file_path, "w", encoding="utf-8") as f:
                f.write(full_transcription_text)

            processed_text = post_process_with_llm(full_transcription_text)
            retelling_text = get_detailed_retelling_from_llm(full_transcription_text)
            questions_text = get_questions_from_llm(full_transcription_text)

            final_output = f"## –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –≤—ã–∂–∏–º–∫–∞\n\n{processed_text}\n\n"
            final_output += f"## –ü–æ–¥—Ä–æ–±–Ω—ã–π –ø–µ—Ä–µ—Å–∫–∞–∑\n\n{retelling_text}\n\n"
            final_output += f"## –í–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ\n\n{questions_text}"
            
            with open(processed_transcription_file_path, "w", encoding="utf-8") as f:
                f.write(final_output)
            print(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ '{transcription_folder}'.")

if __name__ == "__main__":
    vosk_model_path, speaker_model_path, browser_window_title = get_model_paths()
    if vosk_model_path:
        vb_cable_index = find_vb_cable_device()
        if vb_cable_index is not None:
            transcribe_audio_stream(vb_cable_index, vosk_model_path, speaker_model_path, browser_window_title)